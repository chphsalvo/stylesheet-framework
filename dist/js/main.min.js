var observer,viewportEls=document.querySelectorAll(".viewport");0<viewportEls.length&&(observer=new IntersectionObserver(function(t){t.forEach(function(t){t.target.classList.toggle("is-in-viewport",t.isIntersecting)})},{threshold:[0]}),viewportEls.forEach(function(t){observer.observe(t)})),document.querySelectorAll("[data-target]").forEach(t=>{t.addEventListener("click",function(){const t=this.getAttribute("data-target").split(",").map(t=>t.trim()),e=this.getAttribute("data-class")||"open";t.forEach(t=>{document.querySelectorAll(t).forEach(t=>{t.classList.toggle(e)})})})}),document.querySelectorAll("[data-scroll]").forEach(t=>{t.addEventListener("click",function(){const t=this.getAttribute("data-scroll").split(",").map(t=>t.trim());t.forEach(t=>{document.querySelectorAll(t).forEach(t=>{const e=getComputedStyle(document.documentElement),o=e.getPropertyValue("--scroll-offset").trim();let r=0;o&&(r=parseInt(o.replace("px",""),10)||0);t=t.getBoundingClientRect().top+window.pageYOffset-r;window.scrollTo({top:t,behavior:"smooth"})})})})});
//# sourceMappingURL=main.min.js.map
